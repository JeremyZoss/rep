::
    
    REP: I0002
    Title: Planning for unconstrained cartesian paths
    Author: Dan Solomon
    Status: Draft
    Type: Standards Track
    Created: 29-October-2013

Outline
=======

#. Abstract_
#. Definitions_
#. Motivation_
#. Requirements_
#. Interface_
#. Stratagies_
#. `Todo's`_
#. References_
#. Copyright_


Abstract
========

This REP discusses the capability to plan joint-space trajectories for robotic arms for which a pre-existing cartesian path is defined. The cartesian path may be fully defined (6 DOF) or under-defined (< 6 DOF).

Definitions
=========

The following definitions are used throughout:
 * joint, axis - A single controllable item.  Typically revolute(rotational) or linear motion.
 * joint trajectory - A set of joint points, where each joint point fully defines the position of the robot.
 * DOF - Degree of Freedom. A robot with 6 joints has 6 DOF in joint space. The location of a point in space (xyz) has 3 DOF.

Motivation
==========

 * Motion planners in ROS are primarily focused on joint-space planners that get the robot from state A to state B. The planners may create smooth, collision-free paths that may also hold a constraint along that path (e.g. holding a cup upright). 
 * In many industrial applications, the processes that industrial robots are employed for have a pre-determined cartesian path. This path typically has a defined position for each point. The path may require exact position and orientation, loose position and/or orientation, or even undefined orientation.
 * There does not currently exist a good planner implementation that solves this problem


Requirements
=========

The planner shall meet the following requirements:
 * Accept a list of cartesion points. Each point must have position fully defined, and may have up to 3 DOF orientation defined.
 * Tolerances on each DOF may be specified. Tolerances on positions must be reasonable (TODO what is reasonable?)


Interface
=========

 * It is preferred that the planner is integrated with MoveIt. In the short term, the effort will be to use MoveIt libraries without creating an actual planner in MoveIt.
 * The planner should use existing MoveIt infrastructure whenever possible.
 * Inputs from ROS parameter server
  * Robot information via URDF/SRDF
  * End effector model (TODO how? a new urdf?)
  * Objects in environment
  * Default weights/parameters to be used by planner
 * ROS services
  * req - Cartesian path - (maybe a new type with) ``PoseArray path, PoseArray tolerance, JointTrajectoryPoint process_params``
  * res - joint trajectory - JointTrajectory
  


Stratagies
=========
The current strategy:
 1. Find all joint-space solutions for each cartesian point (perform IK at each point). If the point is not fully defined, discretize the space into 6 DOF points and find all solutions for the discretized point.
 2. Perform a graph search through each point to find the joint trajectory. User-defined callbacks may be used to define the cost of each movement.
 3. Stop when a solution is found, or store all paths that can be found.
 4. (optional) Perform smoothing on the trajectory. Smoothing will be under constraints defined by the process (e.g. hold position, hold orientation, speed, acceleration, etc.)
   
   

Todo's
=========
The following items still need to be addressed:
 * What is a reasonable tolerance on position DOFs?
 * Best way to input models (message, service, parameter server?)
 
References
==========


Copyright
=========

This document has been placed in the public domain.

â€ƒ
..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
